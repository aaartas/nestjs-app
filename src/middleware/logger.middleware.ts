import { Injectable, NestMiddleware } from '@nestjs/common';

//ミドルウェア
// 概要
// ユーザーのリクエストをルートハンドラで処理する前に呼び出される関数。これを利用することで、リクエストの処理前に決まった処理を追加できます。
// これはExpress.jsに存在するミドルウェアと同様の機能です。

// ○ミドルウェアの機能
// ミドルウェアは主に、次のような要件を満たしたいときに使います。
// 任意のコードの実行
// 要求オブジェクトと応答オブジェクトを変更
// 要求と応答のサイクルを終了
// スタック内の次のミドルウェア関数を呼び出す
// 現在のミドルウェア関数が要求/応答サイクルを終了しない場合はnext()、次のミドルウェア関数に制御を渡すために呼び出す必要があります。それ以外の場合、リクエストはハングしたままになります。

// ○ミドルウェアの目的
// リクエストの解析
// レスポンスヘッダーの追加
// 不正アクセスの禁止

// 作りこむことで、ユーザーごとに処理するデータを変更したり、不正なアクセスを検知したりすることが可能

@Injectable()
export class LoggerMiddleware implements NestMiddleware {
  use(req: any, res: any, next: () => void) {
    console.log('Request');
    next();
  }
}
